"""
코딩 테스트에서 테스트 케이스가 입력된 뒤에 테스트 케이스만큼 특정한 알고리즘을 수행한 결과를 반복적으로 출력하도록 요구하는 뭊게가 출제되는 경우가 많다
이럴 때는 문제를 푸는 코드를 함수화하면 매우 효과적으로 풀 수 있다
"""

"""
함수를 작성할 때는 함수 내부에서 사용되는 변수의 값을 전달 받기 위해 매개변수를 정의할 수 있다.
이후에 함수에서 어떠한 값을 변환하고자 할 때는 return을 이용한다.

def 함수명(매개변수):
    실행할 소스코드
    return 반환 값
"""

# 더하기 기능을 제공하는 함수

def add(a, b):
    return a + b

print(add(3, 7))

# return문 없이 작성 

def add2(a, b):
    print('함수의 결과 : ', a + b)

add2(3, 7)

"""
함수를 호출하는 과정에서 다음과 같이 인자 argument 를 넘겨줄 때, 파라미터의 변수를 직접 지정해서 값을 넣을 수 있다.
"""

def add3(a, b):
    print('함수의 결과 : ', a + b)

add3(b = 3, a= 7) 

"""
함수 안에서 함수 밖의 변수 데이터를 변경해야 하는 경우

이때는 함수에서 global키워드를 이용하면 된다.
키워드로 변수를 지정하면, 행당 함수에서는 지역 변수를 만들지 않고, 함수 바깥에 선언된 변수를 바로 참조하게 된다.
"""

a = 0

def func():
    global a
    a += 1

for i in range(10):
    func()
    # print(a)

print(a)

"""
파이썬은 람다 표현식을 쓸 수 있다.
람다표현식을 이용하면 함수를 매우 간단하게 작성하여 적용할 수 있다.

특정한 기능을 수행하는 함수를 한 줄에 작성할 수 있다는 점이 특징이다.

람다식은 파이썬의 정렬 라이브러리를 사용할 때, 정렬 기준(Key)을 설정할 때에도 자주 사용한다.
"""

def add4(a, b):
    return a + b

# 일반적인 add4() 메서드 사용
print(add(3, 7))

# 람다 표현식으로 구현한 add4() 메소드
print((lambda a, b: a + b)(3, 7))